plt <- raster::plot(shape)
plt
print(plt)
shape <- shapefile("C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/server_functions/Shapefiles/Wojewodztwa.shp")
plt <- raster::plot(shape)
print(plt)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(raster)){
install.packages("raster")
library(raster)
}
directory <- "C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App"
runApp(directory, launch.browser = TRUE, port = 4201)
library(rgdal)     # R wrapper around GDAL/OGR
library(rgdal)     # R wrapper around GDAL/OGR
library(ggplot2)   # for general plotting
library(ggmaps)    # for fortifying shapefiles
# First read in the shapefile, using the path to the shapefile and the shapefile name minus the
# extension as arguments
shapefile <- readOGR("C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/server_functions/Shapefiles/", "Wojewodztwo.shp")
# First read in the shapefile, using the path to the shapefile and the shapefile name minus the
# extension as arguments
shapefile <- readOGR("C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/server_functions/Shapefiles/Wojewodztwo.shp")
library(rgdal)
shp <- readOGR(dsn = "C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/server_functions/Shapefiles/Wojewodztwa.shp")
map <- ggplot() + geom_polygon(data = shp, aes(x = long, y = lat, group = group), colour = "black", fill = NA)
map
shp %>% head()
shp <- readOGR(dsn = "C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/server_functions/Shapefiles/Wojewodztwa.shp", encoding = "UTF-8")
map <- ggplot() + geom_polygon(data = shp, aes(x = long, y = lat, group = group), colour = "black", fill = NA)
shp %>% head()
shp <- readOGR(dsn = "C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/server_functions/Shapefiles/Wojewodztwa.shp",
use_iconv=TRUE,
encoding = "UTF-8")
shp %>% head()
map <- ggplot() + geom_polygon(data = shp, aes(x = long, y = lat, group = group), colour = "black", fill = NA)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
directory <- "C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App"
runApp(directory, launch.browser = TRUE, port = 4201)
shp <- readOGR(dsn = "C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/server_functions/Shapefiles/Wojewodztwa.shp",
use_iconv=TRUE,
encoding = "UTF-8")
map <- fortify(shp)
map
map <- ggplot() + geom_polygon(data = shp, aes(x = long, y = lat, group = group), colour = "black", fill = NA)
map
map
map <- fortify(shp)
map
shp
shp %>% head()
shp <- readOGR(dsn = "C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/server_functions/Shapefiles/Wojewodztwa.shp",
use_iconv=TRUE,
encoding = "UTF-8")
map <- fortify(shp)
map <- ggplot() + geom_polygon(data = map, aes(x = long, y = lat, group = group), colour = "black", fill = NA)
map
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
library(DBI)
library(jsonlite)
library(tidyverse)
setwd("C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App")
## Reading JSON
df <- fromJSON("https://api.apify.com/v2/datasets/L3VCmhMeX0KUQeJto/items?format=json&clean=1")
for (i in 1:nrow(df)){
data <- df[i,"infectedByRegion"][[1]]
data <- data %>% select(region, infectedCount, deceasedCount)
data["Date"] <- df[i, "lastUpdatedAtApify"]
## Converting Date column to proper format
data <- data %>% mutate(Date = as.Date(format(as.POSIXct(Date, "UTC", "%Y-%m-%d")), "%Y-%m-%d"))
# max_hour <- data$Date %>% max()
# data <- data %>% filter(Date == max_hour)
#
if (i == 1){
long_df <- data
}
else{
long_df <- rbind(long_df, data)
}
}
long_df
long_df$region %>% unique()
regions <- long_df$region %>% unique()
regions
regions[1:17]
regions <- regions[1:17]
regions
regions[regions != "Cala Polska"]
regions <- regions[regions != "Cala Polska"]
regions_correct <- c("Śląskie", "Dolnośląskie", "Pomorskie", "Lubelskie", "Małopolskie", "Podkarpackie", "Łódzkie",
"Warmińsko-Mazurskie", "Świętokrzyskie", "Mazowieckie", "Zachodniopomorskie", "Wielkopolskie",
"Lubskie", "Opolskie", "Kujawsko-Pomorskie", "Podlaskie"
)
long_df %>% filter(region %in% regions)
regions
write.csv(regions, "regions_original.csv", row.names = FALSE)
regions
long_df <- long_df %>% filter(region %in% regions)
long_df
long_df %>% plyr::mapvalues(region, regions, regions_correct)
plyr::mapvalues(long_df$region, regions, regions_correct)
regions
regions_correct <- c("Śląskie", "Dolnośląskie", "Pomorskie", "Lubelskie", "Małopolskie", "Podkarpackie", "Łódzkie",
"Warmińsko-Mazurskie", "Świętokrzyskie", "Mazowieckie", "Zachodniopomorskie", "Wielkopolskie",
"Lubuskie", "Opolskie", "Kujawsko-Pomorskie", "Podlaskie"
)
plyr::mapvalues(long_df$region, regions, regions_correct)
long_df$region <- plyr::mapvalues(long_df$region, regions, regions_correct)
long_data <- as.data.frame(long_df %>% group_by(Date, region) %>% summarise(
infectedCount = max(infectedCount),
deceasedCount = max(deceasedCount)))
long_data <- long_data %>% filter(Date != '2020-05-12')
long_data["ID"] <- row.names(long_data)
long_data <- long_data %>% mutate(Date = as.character(Date))
long_data <- long_data %>% select(ID, Date, region, infectedCount, deceasedCount)
long_data
long_data
con <- dbConnect(RSQLite::SQLite(), "covid_data.db")
dbWriteTable(con, "Data", long_data, field.types = c(ID = "Integer Primary Key"))
dbDisconnect(con)
write.csv(regions_correct, "regions_correct.csv", row.names = FALSE)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
directory <- "C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App"
runApp(directory, launch.browser = TRUE, port = 4201)
## Keeping only predefined names of regions (to prevent unexpected values coming from json)
regions_original <- read.csv('regions_original')
## Keeping only predefined names of regions (to prevent unexpected values coming from json)
regions_original <- read.csv('regions_original')
## The names however are not formatted in polish, so they are converted with the list below
regions_correct <- read.csv('regions_correct')
df <- fromJSON("https://api.apify.com/v2/key-value-stores/3Po6TV7wTht4vIEid/records/LATEST?disableRedirect=true")
## Keeping only predefined names of regions (to prevent unexpected values coming from json)
regions_original <- read.csv('regions_original')
## Keeping only predefined names of regions (to prevent unexpected values coming from json)
regions_original <- read.csv('C:\Users\grzeg\Desktop\studia\Data Science\2 rok\semestr 2\Reproducible_Research\App\database\regions_original')
## Keeping only predefined names of regions (to prevent unexpected values coming from json)
regions_original <- read.csv('C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/database/regions_original')
## The names however are not formatted in polish, so they are converted with the list below
regions_correct <- read.csv('C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/database/regions_correct')
## Keeping only predefined names of regions (to prevent unexpected values coming from json)
regions_original <- read.csv('C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/database/regions_original')
## Keeping only predefined names of regions (to prevent unexpected values coming from json)
regions_original <- read.csv('C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/database/regions_original.csv')
## The names however are not formatted in polish, so they are converted with the list below
regions_correct <- read.csv('C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/database/regions_correct.csv')
regions_correct
regions_original
cbind(regions_original, regions_correct) %>% view()
df <- fromJSON("https://api.apify.com/v2/key-value-stores/3Po6TV7wTht4vIEid/records/LATEST?disableRedirect=true")
data <- df$infectedByRegion
data["Date"] <- df$lastUpdatedAtApify
data <- data %>% mutate(Date = as.Date(format(as.POSIXct(Date, "UTC", "%Y-%m-%d")), "%Y-%m-%d"))
data <- data %>% mutate(Date = as.character(Date))
data
mapvalues(data$region, regions_original, regions_correct)
plyr::mapvalues(data$region, regions_original, regions_correct)
## Keeping only predefined names of regions (to prevent unexpected values coming from json)
regions_original <- read.csv('C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/database/regions_original.csv', header = F)
## The names however are not formatted in polish, so they are converted with the list below
regions_correct <- read.csv('C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/database/regions_correct.csv', header = F)
regions_original
## Keeping only predefined names of regions (to prevent unexpected values coming from json)
regions_original <- read.csv('C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/database/regions_original.csv')
regions_original
unlist(regions_original, use.names = F)
as.vector(regions_original)
regions_original$x
unlist(regions_original$x, use.names = F)
as.vector(unlist(regions_original$x, use.names = F))
regions_original <- as.vector(unlist(regions_original$x, use.names = F))
## The names however are not formatted in polish, so they are converted with the list below
regions_correct <- read.csv('C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App/database/regions_correct.csv')
regions_correct <- as.vector(unlist(regions_correct$x, use.names = F))
df <- fromJSON("https://api.apify.com/v2/key-value-stores/3Po6TV7wTht4vIEid/records/LATEST?disableRedirect=true")
data <- df$infectedByRegion
data["Date"] <- df$lastUpdatedAtApify
data <- data %>% mutate(Date = as.Date(format(as.POSIXct(Date, "UTC", "%Y-%m-%d")), "%Y-%m-%d"))
data <- data %>% mutate(Date = as.character(Date))
plyr::mapvalues(data$region, regions_original, regions_correct)
data$region <- plyr::mapvalues(data$region, regions_original, regions_correct)
data
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
directory <- "C:/Users/grzeg/Desktop/studia/Data Science/2 rok/semestr 2/Reproducible_Research/App"
runApp(directory, launch.browser = TRUE, port = 4201)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
runApp(appDir = getwd(),
)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
runApp(appDir = getwd(),
)
runApp(appDir = getwd(),
launch.browser = TRUE
)
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
if(!require(shiny)){
install.packages("shiny")
library(shiny)
}
if(!require(RSQLite)){
install.packages("RSQLite")
library(RSQLite)
}
if(!require(DBI)){
install.packages("DBI")
library(DBI)
}
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)
}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)
}
if(!require(rgdal)){
install.packages("rgdal")
library(rgdal)
}
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
sex <- c(3, 5, 6)
is.na(sex)
sum(is.na(sex))
sex <- c(3, 5, NA)
sum(is.na(sex))
runApp(appDir = getwd(),
launch.browser = TRUE,
port = 4201)
